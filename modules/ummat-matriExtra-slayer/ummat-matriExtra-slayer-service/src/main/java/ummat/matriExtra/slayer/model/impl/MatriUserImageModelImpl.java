/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ummat.matriExtra.slayer.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

import ummat.matriExtra.slayer.model.MatriUserImage;
import ummat.matriExtra.slayer.model.MatriUserImageImageFourBlobModel;
import ummat.matriExtra.slayer.model.MatriUserImageImageOneBlobModel;
import ummat.matriExtra.slayer.model.MatriUserImageImageThreeBlobModel;
import ummat.matriExtra.slayer.model.MatriUserImageImageTwoBlobModel;
import ummat.matriExtra.slayer.model.MatriUserImageModel;
import ummat.matriExtra.slayer.service.MatriUserImageLocalServiceUtil;

/**
 * The base model implementation for the MatriUserImage service. Represents a row in the &quot;MatriExtra_MatriUserImage&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>MatriUserImageModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MatriUserImageImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MatriUserImageImpl
 * @generated
 */
@JSON(strict = true)
public class MatriUserImageModelImpl
	extends BaseModelImpl<MatriUserImage> implements MatriUserImageModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a matri user image model instance should use the <code>MatriUserImage</code> interface instead.
	 */
	public static final String TABLE_NAME = "MatriExtra_MatriUserImage";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"MatriImageId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"MatriUserId", Types.BIGINT}, {"imageOne", Types.BLOB},
		{"imageTwo", Types.BLOB}, {"imageThree", Types.BLOB},
		{"imageFour", Types.BLOB}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MatriImageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MatriUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("imageOne", Types.BLOB);
		TABLE_COLUMNS_MAP.put("imageTwo", Types.BLOB);
		TABLE_COLUMNS_MAP.put("imageThree", Types.BLOB);
		TABLE_COLUMNS_MAP.put("imageFour", Types.BLOB);
	}

	public static final String TABLE_SQL_CREATE =
		"create table MatriExtra_MatriUserImage (uuid_ VARCHAR(75) null,MatriImageId LONG not null primary key,userId LONG,userName VARCHAR(75) null,MatriUserId LONG,imageOne BLOB,imageTwo BLOB,imageThree BLOB,imageFour BLOB)";

	public static final String TABLE_SQL_DROP =
		"drop table MatriExtra_MatriUserImage";

	public static final String ORDER_BY_JPQL =
		" ORDER BY matriUserImage.MatriImageId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY MatriExtra_MatriUserImage.MatriImageId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MATRIUSERID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MATRIIMAGEID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public MatriUserImageModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _MatriImageId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMatriImageId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _MatriImageId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MatriUserImage.class;
	}

	@Override
	public String getModelClassName() {
		return MatriUserImage.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<MatriUserImage, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<MatriUserImage, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MatriUserImage, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((MatriUserImage)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<MatriUserImage, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<MatriUserImage, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(MatriUserImage)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<MatriUserImage, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<MatriUserImage, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<MatriUserImage, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<MatriUserImage, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<MatriUserImage, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<MatriUserImage, Object>>();
		Map<String, BiConsumer<MatriUserImage, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<MatriUserImage, ?>>();

		attributeGetterFunctions.put("uuid", MatriUserImage::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<MatriUserImage, String>)MatriUserImage::setUuid);
		attributeGetterFunctions.put(
			"MatriImageId", MatriUserImage::getMatriImageId);
		attributeSetterBiConsumers.put(
			"MatriImageId",
			(BiConsumer<MatriUserImage, Long>)MatriUserImage::setMatriImageId);
		attributeGetterFunctions.put("userId", MatriUserImage::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<MatriUserImage, Long>)MatriUserImage::setUserId);
		attributeGetterFunctions.put("userName", MatriUserImage::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<MatriUserImage, String>)MatriUserImage::setUserName);
		attributeGetterFunctions.put(
			"MatriUserId", MatriUserImage::getMatriUserId);
		attributeSetterBiConsumers.put(
			"MatriUserId",
			(BiConsumer<MatriUserImage, Long>)MatriUserImage::setMatriUserId);
		attributeGetterFunctions.put("imageOne", MatriUserImage::getImageOne);
		attributeSetterBiConsumers.put(
			"imageOne",
			(BiConsumer<MatriUserImage, Blob>)MatriUserImage::setImageOne);
		attributeGetterFunctions.put("imageTwo", MatriUserImage::getImageTwo);
		attributeSetterBiConsumers.put(
			"imageTwo",
			(BiConsumer<MatriUserImage, Blob>)MatriUserImage::setImageTwo);
		attributeGetterFunctions.put(
			"imageThree", MatriUserImage::getImageThree);
		attributeSetterBiConsumers.put(
			"imageThree",
			(BiConsumer<MatriUserImage, Blob>)MatriUserImage::setImageThree);
		attributeGetterFunctions.put("imageFour", MatriUserImage::getImageFour);
		attributeSetterBiConsumers.put(
			"imageFour",
			(BiConsumer<MatriUserImage, Blob>)MatriUserImage::setImageFour);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getMatriImageId() {
		return _MatriImageId;
	}

	@Override
	public void setMatriImageId(long MatriImageId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_MatriImageId = MatriImageId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalUserId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("userId"));
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public long getMatriUserId() {
		return _MatriUserId;
	}

	@Override
	public void setMatriUserId(long MatriUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_MatriUserId = MatriUserId;
	}

	@Override
	public String getMatriUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getMatriUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setMatriUserUuid(String MatriUserUuid) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalMatriUserId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("MatriUserId"));
	}

	@JSON
	@Override
	public Blob getImageOne() {
		if (_imageOneBlobModel == null) {
			try {
				_imageOneBlobModel =
					MatriUserImageLocalServiceUtil.getImageOneBlobModel(
						getPrimaryKey());
			}
			catch (Exception exception) {
			}
		}

		Blob blob = null;

		if (_imageOneBlobModel != null) {
			blob = _imageOneBlobModel.getImageOneBlob();
		}

		return blob;
	}

	@Override
	public void setImageOne(Blob imageOne) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		if (_imageOneBlobModel == null) {
			_imageOneBlobModel = new MatriUserImageImageOneBlobModel(
				getPrimaryKey(), imageOne);
		}
		else {
			_imageOneBlobModel.setImageOneBlob(imageOne);
		}
	}

	@JSON
	@Override
	public Blob getImageTwo() {
		if (_imageTwoBlobModel == null) {
			try {
				_imageTwoBlobModel =
					MatriUserImageLocalServiceUtil.getImageTwoBlobModel(
						getPrimaryKey());
			}
			catch (Exception exception) {
			}
		}

		Blob blob = null;

		if (_imageTwoBlobModel != null) {
			blob = _imageTwoBlobModel.getImageTwoBlob();
		}

		return blob;
	}

	@Override
	public void setImageTwo(Blob imageTwo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		if (_imageTwoBlobModel == null) {
			_imageTwoBlobModel = new MatriUserImageImageTwoBlobModel(
				getPrimaryKey(), imageTwo);
		}
		else {
			_imageTwoBlobModel.setImageTwoBlob(imageTwo);
		}
	}

	@JSON
	@Override
	public Blob getImageThree() {
		if (_imageThreeBlobModel == null) {
			try {
				_imageThreeBlobModel =
					MatriUserImageLocalServiceUtil.getImageThreeBlobModel(
						getPrimaryKey());
			}
			catch (Exception exception) {
			}
		}

		Blob blob = null;

		if (_imageThreeBlobModel != null) {
			blob = _imageThreeBlobModel.getImageThreeBlob();
		}

		return blob;
	}

	@Override
	public void setImageThree(Blob imageThree) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		if (_imageThreeBlobModel == null) {
			_imageThreeBlobModel = new MatriUserImageImageThreeBlobModel(
				getPrimaryKey(), imageThree);
		}
		else {
			_imageThreeBlobModel.setImageThreeBlob(imageThree);
		}
	}

	@JSON
	@Override
	public Blob getImageFour() {
		if (_imageFourBlobModel == null) {
			try {
				_imageFourBlobModel =
					MatriUserImageLocalServiceUtil.getImageFourBlobModel(
						getPrimaryKey());
			}
			catch (Exception exception) {
			}
		}

		Blob blob = null;

		if (_imageFourBlobModel != null) {
			blob = _imageFourBlobModel.getImageFourBlob();
		}

		return blob;
	}

	@Override
	public void setImageFour(Blob imageFour) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		if (_imageFourBlobModel == null) {
			_imageFourBlobModel = new MatriUserImageImageFourBlobModel(
				getPrimaryKey(), imageFour);
		}
		else {
			_imageFourBlobModel.setImageFourBlob(imageFour);
		}
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, MatriUserImage.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MatriUserImage toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, MatriUserImage>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MatriUserImageImpl matriUserImageImpl = new MatriUserImageImpl();

		matriUserImageImpl.setUuid(getUuid());
		matriUserImageImpl.setMatriImageId(getMatriImageId());
		matriUserImageImpl.setUserId(getUserId());
		matriUserImageImpl.setUserName(getUserName());
		matriUserImageImpl.setMatriUserId(getMatriUserId());

		matriUserImageImpl.resetOriginalValues();

		return matriUserImageImpl;
	}

	@Override
	public MatriUserImage cloneWithOriginalValues() {
		MatriUserImageImpl matriUserImageImpl = new MatriUserImageImpl();

		matriUserImageImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		matriUserImageImpl.setMatriImageId(
			this.<Long>getColumnOriginalValue("MatriImageId"));
		matriUserImageImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		matriUserImageImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		matriUserImageImpl.setMatriUserId(
			this.<Long>getColumnOriginalValue("MatriUserId"));

		return matriUserImageImpl;
	}

	@Override
	public int compareTo(MatriUserImage matriUserImage) {
		long primaryKey = matriUserImage.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof MatriUserImage)) {
			return false;
		}

		MatriUserImage matriUserImage = (MatriUserImage)object;

		long primaryKey = matriUserImage.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_imageOneBlobModel = null;

		_imageTwoBlobModel = null;

		_imageThreeBlobModel = null;

		_imageFourBlobModel = null;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<MatriUserImage> toCacheModel() {
		MatriUserImageCacheModel matriUserImageCacheModel =
			new MatriUserImageCacheModel();

		matriUserImageCacheModel.uuid = getUuid();

		String uuid = matriUserImageCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			matriUserImageCacheModel.uuid = null;
		}

		matriUserImageCacheModel.MatriImageId = getMatriImageId();

		matriUserImageCacheModel.userId = getUserId();

		matriUserImageCacheModel.userName = getUserName();

		String userName = matriUserImageCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			matriUserImageCacheModel.userName = null;
		}

		matriUserImageCacheModel.MatriUserId = getMatriUserId();

		return matriUserImageCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{\"uuid\": ");

		sb.append("\"" + getUuid() + "\"");

		sb.append(", \"MatriImageId\": ");

		sb.append(getMatriImageId());

		sb.append(", \"userId\": ");

		sb.append(getUserId());

		sb.append(", \"userName\": ");

		sb.append("\"" + getUserName() + "\"");

		sb.append(", \"MatriUserId\": ");

		sb.append(getMatriUserId());

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, MatriUserImage>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					MatriUserImage.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _MatriImageId;
	private long _userId;
	private String _userName;
	private long _MatriUserId;
	private MatriUserImageImageOneBlobModel _imageOneBlobModel;
	private MatriUserImageImageTwoBlobModel _imageTwoBlobModel;
	private MatriUserImageImageThreeBlobModel _imageThreeBlobModel;
	private MatriUserImageImageFourBlobModel _imageFourBlobModel;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<MatriUserImage, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((MatriUserImage)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("MatriImageId", _MatriImageId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("MatriUserId", _MatriUserId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("MatriImageId", 2L);

		columnBitmasks.put("userId", 4L);

		columnBitmasks.put("userName", 8L);

		columnBitmasks.put("MatriUserId", 16L);

		columnBitmasks.put("imageOne", 32L);

		columnBitmasks.put("imageTwo", 64L);

		columnBitmasks.put("imageThree", 128L);

		columnBitmasks.put("imageFour", 256L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private MatriUserImage _escapedModel;

}