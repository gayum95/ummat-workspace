/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ummat.travel.webservice.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

import ummat.travel.webservice.model.DriverDetail;
import ummat.travel.webservice.model.DriverDetailModel;

/**
 * The base model implementation for the DriverDetail service. Represents a row in the &quot;UMMATLife_DriverDetail&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DriverDetailModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DriverDetailImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DriverDetailImpl
 * @generated
 */
@JSON(strict = true)
public class DriverDetailModelImpl
	extends BaseModelImpl<DriverDetail> implements DriverDetailModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a driver detail model instance should use the <code>DriverDetail</code> interface instead.
	 */
	public static final String TABLE_NAME = "UMMATLife_DriverDetail";

	public static final Object[][] TABLE_COLUMNS = {
		{"driverId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"driverName", Types.VARCHAR},
		{"age", Types.VARCHAR}, {"Password", Types.VARCHAR},
		{"mobileNumber", Types.VARCHAR}, {"email", Types.VARCHAR},
		{"gender", Types.VARCHAR}, {"driverPhoto", Types.VARCHAR},
		{"aadharNumber", Types.VARCHAR}, {"drivingLicenceId", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("driverId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("driverName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("age", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("Password", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mobileNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("gender", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("driverPhoto", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("aadharNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("drivingLicenceId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table UMMATLife_DriverDetail (driverId LONG not null primary key,userId LONG,companyId LONG,driverName VARCHAR(75) null,age VARCHAR(75) null,Password VARCHAR(75) null,mobileNumber VARCHAR(75) null,email VARCHAR(75) null,gender VARCHAR(75) null,driverPhoto VARCHAR(75) null,aadharNumber VARCHAR(75) null,drivingLicenceId VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table UMMATLife_DriverDetail";

	public static final String ORDER_BY_JPQL =
		" ORDER BY driverDetail.driverId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY UMMATLife_DriverDetail.driverId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DRIVERID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public DriverDetailModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _driverId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDriverId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _driverId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DriverDetail.class;
	}

	@Override
	public String getModelClassName() {
		return DriverDetail.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DriverDetail, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DriverDetail, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DriverDetail, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((DriverDetail)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DriverDetail, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DriverDetail, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DriverDetail)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DriverDetail, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DriverDetail, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<DriverDetail, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<DriverDetail, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<DriverDetail, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<DriverDetail, Object>>();
		Map<String, BiConsumer<DriverDetail, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<DriverDetail, ?>>();

		attributeGetterFunctions.put("driverId", DriverDetail::getDriverId);
		attributeSetterBiConsumers.put(
			"driverId",
			(BiConsumer<DriverDetail, Long>)DriverDetail::setDriverId);
		attributeGetterFunctions.put("userId", DriverDetail::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<DriverDetail, Long>)DriverDetail::setUserId);
		attributeGetterFunctions.put("companyId", DriverDetail::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<DriverDetail, Long>)DriverDetail::setCompanyId);
		attributeGetterFunctions.put("driverName", DriverDetail::getDriverName);
		attributeSetterBiConsumers.put(
			"driverName",
			(BiConsumer<DriverDetail, String>)DriverDetail::setDriverName);
		attributeGetterFunctions.put("age", DriverDetail::getAge);
		attributeSetterBiConsumers.put(
			"age", (BiConsumer<DriverDetail, String>)DriverDetail::setAge);
		attributeGetterFunctions.put("Password", DriverDetail::getPassword);
		attributeSetterBiConsumers.put(
			"Password",
			(BiConsumer<DriverDetail, String>)DriverDetail::setPassword);
		attributeGetterFunctions.put(
			"mobileNumber", DriverDetail::getMobileNumber);
		attributeSetterBiConsumers.put(
			"mobileNumber",
			(BiConsumer<DriverDetail, String>)DriverDetail::setMobileNumber);
		attributeGetterFunctions.put("email", DriverDetail::getEmail);
		attributeSetterBiConsumers.put(
			"email", (BiConsumer<DriverDetail, String>)DriverDetail::setEmail);
		attributeGetterFunctions.put("gender", DriverDetail::getGender);
		attributeSetterBiConsumers.put(
			"gender",
			(BiConsumer<DriverDetail, String>)DriverDetail::setGender);
		attributeGetterFunctions.put(
			"driverPhoto", DriverDetail::getDriverPhoto);
		attributeSetterBiConsumers.put(
			"driverPhoto",
			(BiConsumer<DriverDetail, String>)DriverDetail::setDriverPhoto);
		attributeGetterFunctions.put(
			"aadharNumber", DriverDetail::getAadharNumber);
		attributeSetterBiConsumers.put(
			"aadharNumber",
			(BiConsumer<DriverDetail, String>)DriverDetail::setAadharNumber);
		attributeGetterFunctions.put(
			"drivingLicenceId", DriverDetail::getDrivingLicenceId);
		attributeSetterBiConsumers.put(
			"drivingLicenceId",
			(BiConsumer<DriverDetail, String>)
				DriverDetail::setDrivingLicenceId);
		attributeGetterFunctions.put("createDate", DriverDetail::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<DriverDetail, Date>)DriverDetail::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", DriverDetail::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<DriverDetail, Date>)DriverDetail::setModifiedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getDriverId() {
		return _driverId;
	}

	@Override
	public void setDriverId(long driverId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverId = driverId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalDriverId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("driverId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalUserId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("userId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public String getDriverName() {
		if (_driverName == null) {
			return "";
		}
		else {
			return _driverName;
		}
	}

	@Override
	public void setDriverName(String driverName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverName = driverName;
	}

	@JSON
	@Override
	public String getAge() {
		if (_age == null) {
			return "";
		}
		else {
			return _age;
		}
	}

	@Override
	public void setAge(String age) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_age = age;
	}

	@JSON
	@Override
	public String getPassword() {
		if (_Password == null) {
			return "";
		}
		else {
			return _Password;
		}
	}

	@Override
	public void setPassword(String Password) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_Password = Password;
	}

	@JSON
	@Override
	public String getMobileNumber() {
		if (_mobileNumber == null) {
			return "";
		}
		else {
			return _mobileNumber;
		}
	}

	@Override
	public void setMobileNumber(String mobileNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mobileNumber = mobileNumber;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_email = email;
	}

	@JSON
	@Override
	public String getGender() {
		if (_gender == null) {
			return "";
		}
		else {
			return _gender;
		}
	}

	@Override
	public void setGender(String gender) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_gender = gender;
	}

	@JSON
	@Override
	public String getDriverPhoto() {
		if (_driverPhoto == null) {
			return "";
		}
		else {
			return _driverPhoto;
		}
	}

	@Override
	public void setDriverPhoto(String driverPhoto) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverPhoto = driverPhoto;
	}

	@JSON
	@Override
	public String getAadharNumber() {
		if (_aadharNumber == null) {
			return "";
		}
		else {
			return _aadharNumber;
		}
	}

	@Override
	public void setAadharNumber(String aadharNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_aadharNumber = aadharNumber;
	}

	@JSON
	@Override
	public String getDrivingLicenceId() {
		if (_drivingLicenceId == null) {
			return "";
		}
		else {
			return _drivingLicenceId;
		}
	}

	@Override
	public void setDrivingLicenceId(String drivingLicenceId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_drivingLicenceId = drivingLicenceId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), DriverDetail.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DriverDetail toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DriverDetail>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DriverDetailImpl driverDetailImpl = new DriverDetailImpl();

		driverDetailImpl.setDriverId(getDriverId());
		driverDetailImpl.setUserId(getUserId());
		driverDetailImpl.setCompanyId(getCompanyId());
		driverDetailImpl.setDriverName(getDriverName());
		driverDetailImpl.setAge(getAge());
		driverDetailImpl.setPassword(getPassword());
		driverDetailImpl.setMobileNumber(getMobileNumber());
		driverDetailImpl.setEmail(getEmail());
		driverDetailImpl.setGender(getGender());
		driverDetailImpl.setDriverPhoto(getDriverPhoto());
		driverDetailImpl.setAadharNumber(getAadharNumber());
		driverDetailImpl.setDrivingLicenceId(getDrivingLicenceId());
		driverDetailImpl.setCreateDate(getCreateDate());
		driverDetailImpl.setModifiedDate(getModifiedDate());

		driverDetailImpl.resetOriginalValues();

		return driverDetailImpl;
	}

	@Override
	public DriverDetail cloneWithOriginalValues() {
		DriverDetailImpl driverDetailImpl = new DriverDetailImpl();

		driverDetailImpl.setDriverId(
			this.<Long>getColumnOriginalValue("driverId"));
		driverDetailImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		driverDetailImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		driverDetailImpl.setDriverName(
			this.<String>getColumnOriginalValue("driverName"));
		driverDetailImpl.setAge(this.<String>getColumnOriginalValue("age"));
		driverDetailImpl.setPassword(
			this.<String>getColumnOriginalValue("Password"));
		driverDetailImpl.setMobileNumber(
			this.<String>getColumnOriginalValue("mobileNumber"));
		driverDetailImpl.setEmail(this.<String>getColumnOriginalValue("email"));
		driverDetailImpl.setGender(
			this.<String>getColumnOriginalValue("gender"));
		driverDetailImpl.setDriverPhoto(
			this.<String>getColumnOriginalValue("driverPhoto"));
		driverDetailImpl.setAadharNumber(
			this.<String>getColumnOriginalValue("aadharNumber"));
		driverDetailImpl.setDrivingLicenceId(
			this.<String>getColumnOriginalValue("drivingLicenceId"));
		driverDetailImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		driverDetailImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));

		return driverDetailImpl;
	}

	@Override
	public int compareTo(DriverDetail driverDetail) {
		long primaryKey = driverDetail.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof DriverDetail)) {
			return false;
		}

		DriverDetail driverDetail = (DriverDetail)object;

		long primaryKey = driverDetail.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<DriverDetail> toCacheModel() {
		DriverDetailCacheModel driverDetailCacheModel =
			new DriverDetailCacheModel();

		driverDetailCacheModel.driverId = getDriverId();

		driverDetailCacheModel.userId = getUserId();

		driverDetailCacheModel.companyId = getCompanyId();

		driverDetailCacheModel.driverName = getDriverName();

		String driverName = driverDetailCacheModel.driverName;

		if ((driverName != null) && (driverName.length() == 0)) {
			driverDetailCacheModel.driverName = null;
		}

		driverDetailCacheModel.age = getAge();

		String age = driverDetailCacheModel.age;

		if ((age != null) && (age.length() == 0)) {
			driverDetailCacheModel.age = null;
		}

		driverDetailCacheModel.Password = getPassword();

		String Password = driverDetailCacheModel.Password;

		if ((Password != null) && (Password.length() == 0)) {
			driverDetailCacheModel.Password = null;
		}

		driverDetailCacheModel.mobileNumber = getMobileNumber();

		String mobileNumber = driverDetailCacheModel.mobileNumber;

		if ((mobileNumber != null) && (mobileNumber.length() == 0)) {
			driverDetailCacheModel.mobileNumber = null;
		}

		driverDetailCacheModel.email = getEmail();

		String email = driverDetailCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			driverDetailCacheModel.email = null;
		}

		driverDetailCacheModel.gender = getGender();

		String gender = driverDetailCacheModel.gender;

		if ((gender != null) && (gender.length() == 0)) {
			driverDetailCacheModel.gender = null;
		}

		driverDetailCacheModel.driverPhoto = getDriverPhoto();

		String driverPhoto = driverDetailCacheModel.driverPhoto;

		if ((driverPhoto != null) && (driverPhoto.length() == 0)) {
			driverDetailCacheModel.driverPhoto = null;
		}

		driverDetailCacheModel.aadharNumber = getAadharNumber();

		String aadharNumber = driverDetailCacheModel.aadharNumber;

		if ((aadharNumber != null) && (aadharNumber.length() == 0)) {
			driverDetailCacheModel.aadharNumber = null;
		}

		driverDetailCacheModel.drivingLicenceId = getDrivingLicenceId();

		String drivingLicenceId = driverDetailCacheModel.drivingLicenceId;

		if ((drivingLicenceId != null) && (drivingLicenceId.length() == 0)) {
			driverDetailCacheModel.drivingLicenceId = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			driverDetailCacheModel.createDate = createDate.getTime();
		}
		else {
			driverDetailCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			driverDetailCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			driverDetailCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return driverDetailCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DriverDetail, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DriverDetail, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DriverDetail, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((DriverDetail)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, DriverDetail>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					DriverDetail.class, ModelWrapper.class);

	}

	private long _driverId;
	private long _userId;
	private long _companyId;
	private String _driverName;
	private String _age;
	private String _Password;
	private String _mobileNumber;
	private String _email;
	private String _gender;
	private String _driverPhoto;
	private String _aadharNumber;
	private String _drivingLicenceId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;

	public <T> T getColumnValue(String columnName) {
		Function<DriverDetail, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((DriverDetail)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("driverId", _driverId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("driverName", _driverName);
		_columnOriginalValues.put("age", _age);
		_columnOriginalValues.put("Password", _Password);
		_columnOriginalValues.put("mobileNumber", _mobileNumber);
		_columnOriginalValues.put("email", _email);
		_columnOriginalValues.put("gender", _gender);
		_columnOriginalValues.put("driverPhoto", _driverPhoto);
		_columnOriginalValues.put("aadharNumber", _aadharNumber);
		_columnOriginalValues.put("drivingLicenceId", _drivingLicenceId);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("driverId", 1L);

		columnBitmasks.put("userId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("driverName", 8L);

		columnBitmasks.put("age", 16L);

		columnBitmasks.put("Password", 32L);

		columnBitmasks.put("mobileNumber", 64L);

		columnBitmasks.put("email", 128L);

		columnBitmasks.put("gender", 256L);

		columnBitmasks.put("driverPhoto", 512L);

		columnBitmasks.put("aadharNumber", 1024L);

		columnBitmasks.put("drivingLicenceId", 2048L);

		columnBitmasks.put("createDate", 4096L);

		columnBitmasks.put("modifiedDate", 8192L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private DriverDetail _escapedModel;

}