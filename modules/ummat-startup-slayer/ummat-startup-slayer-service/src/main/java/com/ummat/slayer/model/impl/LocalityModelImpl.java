/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ummat.slayer.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.ummat.slayer.model.Locality;
import com.ummat.slayer.model.LocalityModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Locality service. Represents a row in the &quot;Locality&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>LocalityModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LocalityImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LocalityImpl
 * @generated
 */
@JSON(strict = true)
public class LocalityModelImpl
	extends BaseModelImpl<Locality> implements LocalityModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a locality model instance should use the <code>Locality</code> interface instead.
	 */
	public static final String TABLE_NAME = "Locality";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"localityId", Types.BIGINT},
		{"regionId", Types.BIGINT}, {"districtId", Types.BIGINT},
		{"name", Types.VARCHAR}, {"active_", Types.BOOLEAN},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("localityId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("regionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("districtId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("active_", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Locality (uuid_ VARCHAR(75) null,localityId LONG not null primary key,regionId LONG,districtId LONG,name VARCHAR(75) null,active_ BOOLEAN,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table Locality";

	public static final String ORDER_BY_JPQL =
		" ORDER BY locality.localityId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Locality.localityId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DISTRICTID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long LOCALITYID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public LocalityModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _localityId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLocalityId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _localityId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Locality.class;
	}

	@Override
	public String getModelClassName() {
		return Locality.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Locality, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Locality, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Locality, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Locality)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Locality, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Locality, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Locality)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Locality, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Locality, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Locality, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Locality, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Locality, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Locality, Object>>();
		Map<String, BiConsumer<Locality, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Locality, ?>>();

		attributeGetterFunctions.put("uuid", Locality::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Locality, String>)Locality::setUuid);
		attributeGetterFunctions.put("localityId", Locality::getLocalityId);
		attributeSetterBiConsumers.put(
			"localityId", (BiConsumer<Locality, Long>)Locality::setLocalityId);
		attributeGetterFunctions.put("regionId", Locality::getRegionId);
		attributeSetterBiConsumers.put(
			"regionId", (BiConsumer<Locality, Long>)Locality::setRegionId);
		attributeGetterFunctions.put("districtId", Locality::getDistrictId);
		attributeSetterBiConsumers.put(
			"districtId", (BiConsumer<Locality, Long>)Locality::setDistrictId);
		attributeGetterFunctions.put("name", Locality::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<Locality, String>)Locality::setName);
		attributeGetterFunctions.put("active", Locality::getActive);
		attributeSetterBiConsumers.put(
			"active", (BiConsumer<Locality, Boolean>)Locality::setActive);
		attributeGetterFunctions.put("companyId", Locality::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Locality, Long>)Locality::setCompanyId);
		attributeGetterFunctions.put("userId", Locality::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Locality, Long>)Locality::setUserId);
		attributeGetterFunctions.put("createDate", Locality::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Locality, Date>)Locality::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Locality::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Locality, Date>)Locality::setModifiedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getLocalityId() {
		return _localityId;
	}

	@Override
	public void setLocalityId(long localityId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_localityId = localityId;
	}

	@JSON
	@Override
	public long getRegionId() {
		return _regionId;
	}

	@Override
	public void setRegionId(long regionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_regionId = regionId;
	}

	@JSON
	@Override
	public long getDistrictId() {
		return _districtId;
	}

	@Override
	public void setDistrictId(long districtId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_districtId = districtId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalDistrictId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("districtId"));
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@JSON
	@Override
	public boolean getActive() {
		return _active;
	}

	@JSON
	@Override
	public boolean isActive() {
		return _active;
	}

	@Override
	public void setActive(boolean active) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_active = active;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Locality.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Locality.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Locality toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Locality>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LocalityImpl localityImpl = new LocalityImpl();

		localityImpl.setUuid(getUuid());
		localityImpl.setLocalityId(getLocalityId());
		localityImpl.setRegionId(getRegionId());
		localityImpl.setDistrictId(getDistrictId());
		localityImpl.setName(getName());
		localityImpl.setActive(isActive());
		localityImpl.setCompanyId(getCompanyId());
		localityImpl.setUserId(getUserId());
		localityImpl.setCreateDate(getCreateDate());
		localityImpl.setModifiedDate(getModifiedDate());

		localityImpl.resetOriginalValues();

		return localityImpl;
	}

	@Override
	public Locality cloneWithOriginalValues() {
		LocalityImpl localityImpl = new LocalityImpl();

		localityImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		localityImpl.setLocalityId(
			this.<Long>getColumnOriginalValue("localityId"));
		localityImpl.setRegionId(this.<Long>getColumnOriginalValue("regionId"));
		localityImpl.setDistrictId(
			this.<Long>getColumnOriginalValue("districtId"));
		localityImpl.setName(this.<String>getColumnOriginalValue("name"));
		localityImpl.setActive(this.<Boolean>getColumnOriginalValue("active_"));
		localityImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		localityImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		localityImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		localityImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));

		return localityImpl;
	}

	@Override
	public int compareTo(Locality locality) {
		long primaryKey = locality.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Locality)) {
			return false;
		}

		Locality locality = (Locality)object;

		long primaryKey = locality.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Locality> toCacheModel() {
		LocalityCacheModel localityCacheModel = new LocalityCacheModel();

		localityCacheModel.uuid = getUuid();

		String uuid = localityCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			localityCacheModel.uuid = null;
		}

		localityCacheModel.localityId = getLocalityId();

		localityCacheModel.regionId = getRegionId();

		localityCacheModel.districtId = getDistrictId();

		localityCacheModel.name = getName();

		String name = localityCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			localityCacheModel.name = null;
		}

		localityCacheModel.active = isActive();

		localityCacheModel.companyId = getCompanyId();

		localityCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			localityCacheModel.createDate = createDate.getTime();
		}
		else {
			localityCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			localityCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			localityCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return localityCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Locality, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Locality, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Locality, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Locality)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Locality>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Locality.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _localityId;
	private long _regionId;
	private long _districtId;
	private String _name;
	private boolean _active;
	private long _companyId;
	private long _userId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Locality, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Locality)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("localityId", _localityId);
		_columnOriginalValues.put("regionId", _regionId);
		_columnOriginalValues.put("districtId", _districtId);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("active_", _active);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("active_", "active");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("localityId", 2L);

		columnBitmasks.put("regionId", 4L);

		columnBitmasks.put("districtId", 8L);

		columnBitmasks.put("name", 16L);

		columnBitmasks.put("active_", 32L);

		columnBitmasks.put("companyId", 64L);

		columnBitmasks.put("userId", 128L);

		columnBitmasks.put("createDate", 256L);

		columnBitmasks.put("modifiedDate", 512L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Locality _escapedModel;

}