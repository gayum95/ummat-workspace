/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ummat_startup_details.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

import ummat_startup_details.model.MatriUser;
import ummat_startup_details.model.MatriUserModel;

/**
 * The base model implementation for the MatriUser service. Represents a row in the &quot;TNUMMAT_MatriUser&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>MatriUserModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MatriUserImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MatriUserImpl
 * @generated
 */
@JSON(strict = true)
public class MatriUserModelImpl
	extends BaseModelImpl<MatriUser> implements MatriUserModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a matri user model instance should use the <code>MatriUser</code> interface instead.
	 */
	public static final String TABLE_NAME = "TNUMMAT_MatriUser";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"id_", Types.BIGINT},
		{"userId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"education", Types.VARCHAR}, {"country", Types.BIGINT},
		{"state_", Types.VARCHAR}, {"district", Types.BIGINT},
		{"area", Types.VARCHAR}, {"jamath", Types.VARCHAR},
		{"maritalStatus", Types.VARCHAR}, {"height", Types.DOUBLE},
		{"weight", Types.DOUBLE}, {"primaryId", Types.VARCHAR},
		{"imageId", Types.BIGINT}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"color", Types.VARCHAR},
		{"bio", Types.VARCHAR}, {"malechild", Types.VARCHAR},
		{"femalechild", Types.VARCHAR}, {"MothertongueLanguage", Types.VARCHAR},
		{"LivingPlace", Types.VARCHAR}, {"Monthlyincome", Types.DOUBLE}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("education", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("country", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("state_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("district", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("area", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("jamath", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("maritalStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("height", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("weight", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("primaryId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("imageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("color", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bio", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("malechild", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("femalechild", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MothertongueLanguage", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("LivingPlace", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("Monthlyincome", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE =
		"create table TNUMMAT_MatriUser (uuid_ VARCHAR(75) null,id_ LONG not null primary key,userId LONG,companyId LONG,education VARCHAR(75) null,country LONG,state_ VARCHAR(75) null,district LONG,area VARCHAR(75) null,jamath VARCHAR(75) null,maritalStatus VARCHAR(75) null,height DOUBLE,weight DOUBLE,primaryId VARCHAR(75) null,imageId LONG,createDate DATE null,modifiedDate DATE null,color VARCHAR(75) null,bio VARCHAR(75) null,malechild VARCHAR(75) null,femalechild VARCHAR(75) null,MothertongueLanguage VARCHAR(75) null,LivingPlace VARCHAR(75) null,Monthlyincome DOUBLE)";

	public static final String TABLE_SQL_DROP = "drop table TNUMMAT_MatriUser";

	public static final String ORDER_BY_JPQL = " ORDER BY matriUser.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY TNUMMAT_MatriUser.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long AREA_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DISTRICT_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public MatriUserModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MatriUser.class;
	}

	@Override
	public String getModelClassName() {
		return MatriUser.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<MatriUser, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<MatriUser, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MatriUser, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((MatriUser)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<MatriUser, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<MatriUser, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(MatriUser)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<MatriUser, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<MatriUser, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<MatriUser, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<MatriUser, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<MatriUser, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<MatriUser, Object>>();
		Map<String, BiConsumer<MatriUser, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<MatriUser, ?>>();

		attributeGetterFunctions.put("uuid", MatriUser::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<MatriUser, String>)MatriUser::setUuid);
		attributeGetterFunctions.put("id", MatriUser::getId);
		attributeSetterBiConsumers.put(
			"id", (BiConsumer<MatriUser, Long>)MatriUser::setId);
		attributeGetterFunctions.put("userId", MatriUser::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<MatriUser, Long>)MatriUser::setUserId);
		attributeGetterFunctions.put("companyId", MatriUser::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<MatriUser, Long>)MatriUser::setCompanyId);
		attributeGetterFunctions.put("education", MatriUser::getEducation);
		attributeSetterBiConsumers.put(
			"education",
			(BiConsumer<MatriUser, String>)MatriUser::setEducation);
		attributeGetterFunctions.put("country", MatriUser::getCountry);
		attributeSetterBiConsumers.put(
			"country", (BiConsumer<MatriUser, Long>)MatriUser::setCountry);
		attributeGetterFunctions.put("state", MatriUser::getState);
		attributeSetterBiConsumers.put(
			"state", (BiConsumer<MatriUser, String>)MatriUser::setState);
		attributeGetterFunctions.put("district", MatriUser::getDistrict);
		attributeSetterBiConsumers.put(
			"district", (BiConsumer<MatriUser, Long>)MatriUser::setDistrict);
		attributeGetterFunctions.put("area", MatriUser::getArea);
		attributeSetterBiConsumers.put(
			"area", (BiConsumer<MatriUser, String>)MatriUser::setArea);
		attributeGetterFunctions.put("jamath", MatriUser::getJamath);
		attributeSetterBiConsumers.put(
			"jamath", (BiConsumer<MatriUser, String>)MatriUser::setJamath);
		attributeGetterFunctions.put(
			"maritalStatus", MatriUser::getMaritalStatus);
		attributeSetterBiConsumers.put(
			"maritalStatus",
			(BiConsumer<MatriUser, String>)MatriUser::setMaritalStatus);
		attributeGetterFunctions.put("height", MatriUser::getHeight);
		attributeSetterBiConsumers.put(
			"height", (BiConsumer<MatriUser, Double>)MatriUser::setHeight);
		attributeGetterFunctions.put("weight", MatriUser::getWeight);
		attributeSetterBiConsumers.put(
			"weight", (BiConsumer<MatriUser, Double>)MatriUser::setWeight);
		attributeGetterFunctions.put("primaryId", MatriUser::getPrimaryId);
		attributeSetterBiConsumers.put(
			"primaryId",
			(BiConsumer<MatriUser, String>)MatriUser::setPrimaryId);
		attributeGetterFunctions.put("imageId", MatriUser::getImageId);
		attributeSetterBiConsumers.put(
			"imageId", (BiConsumer<MatriUser, Long>)MatriUser::setImageId);
		attributeGetterFunctions.put("createDate", MatriUser::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<MatriUser, Date>)MatriUser::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", MatriUser::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<MatriUser, Date>)MatriUser::setModifiedDate);
		attributeGetterFunctions.put("color", MatriUser::getColor);
		attributeSetterBiConsumers.put(
			"color", (BiConsumer<MatriUser, String>)MatriUser::setColor);
		attributeGetterFunctions.put("bio", MatriUser::getBio);
		attributeSetterBiConsumers.put(
			"bio", (BiConsumer<MatriUser, String>)MatriUser::setBio);
		attributeGetterFunctions.put("malechild", MatriUser::getMalechild);
		attributeSetterBiConsumers.put(
			"malechild",
			(BiConsumer<MatriUser, String>)MatriUser::setMalechild);
		attributeGetterFunctions.put("femalechild", MatriUser::getFemalechild);
		attributeSetterBiConsumers.put(
			"femalechild",
			(BiConsumer<MatriUser, String>)MatriUser::setFemalechild);
		attributeGetterFunctions.put(
			"MothertongueLanguage", MatriUser::getMothertongueLanguage);
		attributeSetterBiConsumers.put(
			"MothertongueLanguage",
			(BiConsumer<MatriUser, String>)MatriUser::setMothertongueLanguage);
		attributeGetterFunctions.put("LivingPlace", MatriUser::getLivingPlace);
		attributeSetterBiConsumers.put(
			"LivingPlace",
			(BiConsumer<MatriUser, String>)MatriUser::setLivingPlace);
		attributeGetterFunctions.put(
			"Monthlyincome", MatriUser::getMonthlyincome);
		attributeSetterBiConsumers.put(
			"Monthlyincome",
			(BiConsumer<MatriUser, Double>)MatriUser::setMonthlyincome);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalUserId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("userId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public String getEducation() {
		if (_education == null) {
			return "";
		}
		else {
			return _education;
		}
	}

	@Override
	public void setEducation(String education) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_education = education;
	}

	@JSON
	@Override
	public long getCountry() {
		return _country;
	}

	@Override
	public void setCountry(long country) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_country = country;
	}

	@JSON
	@Override
	public String getState() {
		if (_state == null) {
			return "";
		}
		else {
			return _state;
		}
	}

	@Override
	public void setState(String state) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_state = state;
	}

	@JSON
	@Override
	public long getDistrict() {
		return _district;
	}

	@Override
	public void setDistrict(long district) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_district = district;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalDistrict() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("district"));
	}

	@JSON
	@Override
	public String getArea() {
		if (_area == null) {
			return "";
		}
		else {
			return _area;
		}
	}

	@Override
	public void setArea(String area) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_area = area;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalArea() {
		return getColumnOriginalValue("area");
	}

	@JSON
	@Override
	public String getJamath() {
		if (_jamath == null) {
			return "";
		}
		else {
			return _jamath;
		}
	}

	@Override
	public void setJamath(String jamath) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jamath = jamath;
	}

	@JSON
	@Override
	public String getMaritalStatus() {
		if (_maritalStatus == null) {
			return "";
		}
		else {
			return _maritalStatus;
		}
	}

	@Override
	public void setMaritalStatus(String maritalStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_maritalStatus = maritalStatus;
	}

	@JSON
	@Override
	public Double getHeight() {
		return _height;
	}

	@Override
	public void setHeight(Double height) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_height = height;
	}

	@JSON
	@Override
	public double getWeight() {
		return _weight;
	}

	@Override
	public void setWeight(double weight) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_weight = weight;
	}

	@JSON
	@Override
	public String getPrimaryId() {
		if (_primaryId == null) {
			return "";
		}
		else {
			return _primaryId;
		}
	}

	@Override
	public void setPrimaryId(String primaryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_primaryId = primaryId;
	}

	@JSON
	@Override
	public long getImageId() {
		return _imageId;
	}

	@Override
	public void setImageId(long imageId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_imageId = imageId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getColor() {
		if (_color == null) {
			return "";
		}
		else {
			return _color;
		}
	}

	@Override
	public void setColor(String color) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_color = color;
	}

	@JSON
	@Override
	public String getBio() {
		if (_bio == null) {
			return "";
		}
		else {
			return _bio;
		}
	}

	@Override
	public void setBio(String bio) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bio = bio;
	}

	@JSON
	@Override
	public String getMalechild() {
		if (_malechild == null) {
			return "";
		}
		else {
			return _malechild;
		}
	}

	@Override
	public void setMalechild(String malechild) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_malechild = malechild;
	}

	@JSON
	@Override
	public String getFemalechild() {
		if (_femalechild == null) {
			return "";
		}
		else {
			return _femalechild;
		}
	}

	@Override
	public void setFemalechild(String femalechild) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_femalechild = femalechild;
	}

	@JSON
	@Override
	public String getMothertongueLanguage() {
		if (_MothertongueLanguage == null) {
			return "";
		}
		else {
			return _MothertongueLanguage;
		}
	}

	@Override
	public void setMothertongueLanguage(String MothertongueLanguage) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_MothertongueLanguage = MothertongueLanguage;
	}

	@JSON
	@Override
	public String getLivingPlace() {
		if (_LivingPlace == null) {
			return "";
		}
		else {
			return _LivingPlace;
		}
	}

	@Override
	public void setLivingPlace(String LivingPlace) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_LivingPlace = LivingPlace;
	}

	@JSON
	@Override
	public double getMonthlyincome() {
		return _Monthlyincome;
	}

	@Override
	public void setMonthlyincome(double Monthlyincome) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_Monthlyincome = Monthlyincome;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(MatriUser.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), MatriUser.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MatriUser toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, MatriUser>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MatriUserImpl matriUserImpl = new MatriUserImpl();

		matriUserImpl.setUuid(getUuid());
		matriUserImpl.setId(getId());
		matriUserImpl.setUserId(getUserId());
		matriUserImpl.setCompanyId(getCompanyId());
		matriUserImpl.setEducation(getEducation());
		matriUserImpl.setCountry(getCountry());
		matriUserImpl.setState(getState());
		matriUserImpl.setDistrict(getDistrict());
		matriUserImpl.setArea(getArea());
		matriUserImpl.setJamath(getJamath());
		matriUserImpl.setMaritalStatus(getMaritalStatus());
		matriUserImpl.setHeight(getHeight());
		matriUserImpl.setWeight(getWeight());
		matriUserImpl.setPrimaryId(getPrimaryId());
		matriUserImpl.setImageId(getImageId());
		matriUserImpl.setCreateDate(getCreateDate());
		matriUserImpl.setModifiedDate(getModifiedDate());
		matriUserImpl.setColor(getColor());
		matriUserImpl.setBio(getBio());
		matriUserImpl.setMalechild(getMalechild());
		matriUserImpl.setFemalechild(getFemalechild());
		matriUserImpl.setMothertongueLanguage(getMothertongueLanguage());
		matriUserImpl.setLivingPlace(getLivingPlace());
		matriUserImpl.setMonthlyincome(getMonthlyincome());

		matriUserImpl.resetOriginalValues();

		return matriUserImpl;
	}

	@Override
	public MatriUser cloneWithOriginalValues() {
		MatriUserImpl matriUserImpl = new MatriUserImpl();

		matriUserImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		matriUserImpl.setId(this.<Long>getColumnOriginalValue("id_"));
		matriUserImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		matriUserImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		matriUserImpl.setEducation(
			this.<String>getColumnOriginalValue("education"));
		matriUserImpl.setCountry(this.<Long>getColumnOriginalValue("country"));
		matriUserImpl.setState(this.<String>getColumnOriginalValue("state_"));
		matriUserImpl.setDistrict(
			this.<Long>getColumnOriginalValue("district"));
		matriUserImpl.setArea(this.<String>getColumnOriginalValue("area"));
		matriUserImpl.setJamath(this.<String>getColumnOriginalValue("jamath"));
		matriUserImpl.setMaritalStatus(
			this.<String>getColumnOriginalValue("maritalStatus"));
		matriUserImpl.setHeight(this.<Double>getColumnOriginalValue("height"));
		matriUserImpl.setWeight(this.<Double>getColumnOriginalValue("weight"));
		matriUserImpl.setPrimaryId(
			this.<String>getColumnOriginalValue("primaryId"));
		matriUserImpl.setImageId(this.<Long>getColumnOriginalValue("imageId"));
		matriUserImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		matriUserImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		matriUserImpl.setColor(this.<String>getColumnOriginalValue("color"));
		matriUserImpl.setBio(this.<String>getColumnOriginalValue("bio"));
		matriUserImpl.setMalechild(
			this.<String>getColumnOriginalValue("malechild"));
		matriUserImpl.setFemalechild(
			this.<String>getColumnOriginalValue("femalechild"));
		matriUserImpl.setMothertongueLanguage(
			this.<String>getColumnOriginalValue("MothertongueLanguage"));
		matriUserImpl.setLivingPlace(
			this.<String>getColumnOriginalValue("LivingPlace"));
		matriUserImpl.setMonthlyincome(
			this.<Double>getColumnOriginalValue("Monthlyincome"));

		return matriUserImpl;
	}

	@Override
	public int compareTo(MatriUser matriUser) {
		long primaryKey = matriUser.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof MatriUser)) {
			return false;
		}

		MatriUser matriUser = (MatriUser)object;

		long primaryKey = matriUser.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<MatriUser> toCacheModel() {
		MatriUserCacheModel matriUserCacheModel = new MatriUserCacheModel();

		matriUserCacheModel.uuid = getUuid();

		String uuid = matriUserCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			matriUserCacheModel.uuid = null;
		}

		matriUserCacheModel.id = getId();

		matriUserCacheModel.userId = getUserId();

		matriUserCacheModel.companyId = getCompanyId();

		matriUserCacheModel.education = getEducation();

		String education = matriUserCacheModel.education;

		if ((education != null) && (education.length() == 0)) {
			matriUserCacheModel.education = null;
		}

		matriUserCacheModel.country = getCountry();

		matriUserCacheModel.state = getState();

		String state = matriUserCacheModel.state;

		if ((state != null) && (state.length() == 0)) {
			matriUserCacheModel.state = null;
		}

		matriUserCacheModel.district = getDistrict();

		matriUserCacheModel.area = getArea();

		String area = matriUserCacheModel.area;

		if ((area != null) && (area.length() == 0)) {
			matriUserCacheModel.area = null;
		}

		matriUserCacheModel.jamath = getJamath();

		String jamath = matriUserCacheModel.jamath;

		if ((jamath != null) && (jamath.length() == 0)) {
			matriUserCacheModel.jamath = null;
		}

		matriUserCacheModel.maritalStatus = getMaritalStatus();

		String maritalStatus = matriUserCacheModel.maritalStatus;

		if ((maritalStatus != null) && (maritalStatus.length() == 0)) {
			matriUserCacheModel.maritalStatus = null;
		}

		Double height = getHeight();

		if (height != null) {
			matriUserCacheModel.height = height;
		}

		matriUserCacheModel.weight = getWeight();

		matriUserCacheModel.primaryId = getPrimaryId();

		String primaryId = matriUserCacheModel.primaryId;

		if ((primaryId != null) && (primaryId.length() == 0)) {
			matriUserCacheModel.primaryId = null;
		}

		matriUserCacheModel.imageId = getImageId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			matriUserCacheModel.createDate = createDate.getTime();
		}
		else {
			matriUserCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			matriUserCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			matriUserCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		matriUserCacheModel.color = getColor();

		String color = matriUserCacheModel.color;

		if ((color != null) && (color.length() == 0)) {
			matriUserCacheModel.color = null;
		}

		matriUserCacheModel.bio = getBio();

		String bio = matriUserCacheModel.bio;

		if ((bio != null) && (bio.length() == 0)) {
			matriUserCacheModel.bio = null;
		}

		matriUserCacheModel.malechild = getMalechild();

		String malechild = matriUserCacheModel.malechild;

		if ((malechild != null) && (malechild.length() == 0)) {
			matriUserCacheModel.malechild = null;
		}

		matriUserCacheModel.femalechild = getFemalechild();

		String femalechild = matriUserCacheModel.femalechild;

		if ((femalechild != null) && (femalechild.length() == 0)) {
			matriUserCacheModel.femalechild = null;
		}

		matriUserCacheModel.MothertongueLanguage = getMothertongueLanguage();

		String MothertongueLanguage = matriUserCacheModel.MothertongueLanguage;

		if ((MothertongueLanguage != null) &&
			(MothertongueLanguage.length() == 0)) {

			matriUserCacheModel.MothertongueLanguage = null;
		}

		matriUserCacheModel.LivingPlace = getLivingPlace();

		String LivingPlace = matriUserCacheModel.LivingPlace;

		if ((LivingPlace != null) && (LivingPlace.length() == 0)) {
			matriUserCacheModel.LivingPlace = null;
		}

		matriUserCacheModel.Monthlyincome = getMonthlyincome();

		return matriUserCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<MatriUser, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<MatriUser, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MatriUser, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((MatriUser)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, MatriUser>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					MatriUser.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _id;
	private long _userId;
	private long _companyId;
	private String _education;
	private long _country;
	private String _state;
	private long _district;
	private String _area;
	private String _jamath;
	private String _maritalStatus;
	private Double _height;
	private double _weight;
	private String _primaryId;
	private long _imageId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _color;
	private String _bio;
	private String _malechild;
	private String _femalechild;
	private String _MothertongueLanguage;
	private String _LivingPlace;
	private double _Monthlyincome;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<MatriUser, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((MatriUser)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("id_", _id);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("education", _education);
		_columnOriginalValues.put("country", _country);
		_columnOriginalValues.put("state_", _state);
		_columnOriginalValues.put("district", _district);
		_columnOriginalValues.put("area", _area);
		_columnOriginalValues.put("jamath", _jamath);
		_columnOriginalValues.put("maritalStatus", _maritalStatus);
		_columnOriginalValues.put("height", _height);
		_columnOriginalValues.put("weight", _weight);
		_columnOriginalValues.put("primaryId", _primaryId);
		_columnOriginalValues.put("imageId", _imageId);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("color", _color);
		_columnOriginalValues.put("bio", _bio);
		_columnOriginalValues.put("malechild", _malechild);
		_columnOriginalValues.put("femalechild", _femalechild);
		_columnOriginalValues.put(
			"MothertongueLanguage", _MothertongueLanguage);
		_columnOriginalValues.put("LivingPlace", _LivingPlace);
		_columnOriginalValues.put("Monthlyincome", _Monthlyincome);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("id_", "id");
		attributeNames.put("state_", "state");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("id_", 2L);

		columnBitmasks.put("userId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("education", 16L);

		columnBitmasks.put("country", 32L);

		columnBitmasks.put("state_", 64L);

		columnBitmasks.put("district", 128L);

		columnBitmasks.put("area", 256L);

		columnBitmasks.put("jamath", 512L);

		columnBitmasks.put("maritalStatus", 1024L);

		columnBitmasks.put("height", 2048L);

		columnBitmasks.put("weight", 4096L);

		columnBitmasks.put("primaryId", 8192L);

		columnBitmasks.put("imageId", 16384L);

		columnBitmasks.put("createDate", 32768L);

		columnBitmasks.put("modifiedDate", 65536L);

		columnBitmasks.put("color", 131072L);

		columnBitmasks.put("bio", 262144L);

		columnBitmasks.put("malechild", 524288L);

		columnBitmasks.put("femalechild", 1048576L);

		columnBitmasks.put("MothertongueLanguage", 2097152L);

		columnBitmasks.put("LivingPlace", 4194304L);

		columnBitmasks.put("Monthlyincome", 8388608L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private MatriUser _escapedModel;

}